---
title: 'golangアプリケーションのデプロイと環境変数管理'
date: '2022-10-04'
tags: "golang,Docker,環境変数"
---

# コンパイル型言語のデプロイ
スクリプト言語の場合はスクリプトを配信することがデプロイと同義であるが、コンパイル型の場合はビルド生成物をデプロイしなければならない。またgolangでWebアプリケーションを作成した場合、ビルド成果物自体がサーバスクリプトでもあるため実行環境上でプロセスを実行する必要がある。

## Dockerコンテナとしてデプロイする
コンテナイメージとしてデプロイして立ち上げる想定なら、立ち上げと同時にプロセスを走らせることはできる。実際のところ既にサービスが立ち上がっている状態から新しいイメージのコンテナがポートを交代するとなると手動では困難だが、オーケストレーションツールに任せる場合は自然な流れになる。従ってコンテナによるデプロイ手法を取った。

コンテナとしてデプロイする場合、以下のようなDockerfile書いてコンテナをcommit, pushすればよい。

```
FROM alpine:latest
RUN mkdir /lib64 && \
    ln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2
COPY ./build /app
ENV APPROOT /app
CMD [ "/app/server", "||", "exit", "0" ]
```
alpineにはバイナリをshellに実行させるためのライブラリが入ってはいるものの、shellの参照ディレクトリ名であるlib64が存在しない為シンボリックリンクを張る必要があった。

```
docker login
docker commit mingsiro71/api-stub
docker push mingsiro71/api-stub
```

ホストで手動デプロイの際はdocker hubからイメージをpullして立ち上げる。デプロイの際、以下のように同一ネットワーク上にredisも立てた。

```
docker pull mingsiro71/api-stub
docker network create api-stub
docker run -p 127.0.0.1:8081:80 --net=api-stub --name=api-stub -d mingsiro71/api-stub
docker run -p 6379 --net=api-stub --name=api-stub-redis -d redis
```

/app/serverにあるバイナリのプロセスが立ち上がり、ポート8081をapi-stubがListenする。

# golangアプリケーションにおける環境変数
さて、ここまできて環境変数の管理がスクリプト言語のアプリケーションと異なる事に気が付いた。スクリプト言語ではデプロイしたソースの中に.gitignoreされた環境変数ファイル(通常.envとされる)があり、実行中にファイルを読み込むことでシークレットキー等をソース管理から外すようにしている。

golangの場合、環境変数はos.Getenv()を利用して実行環境の環境変数から呼び出すようになっているため、実行環境上に環境変数をセットするのが基本の方法となる。実行環境であるコンテナに環境変数をセットする機会はイメージをビルドするタイミングか、コンテナを立ち上げるタイミングである。スクリプト言語のように環境変数ファイルをコンテナに差し込んで、立ち上げ時に読み込ませる…といったこともできなくはないが、少々無理がある。

今回はビルド時に環境変数を仕込む方法を取っている。公開のDocker hub経由でデプロイしている関係上イメージを落とすと環境変数が見えてしまうので本来NGではあるが、実務を考えるとDocker hubがプライベートリポジトリであったり、ビルド環境がCI/CDサービスのインスタント環境であると想定されるので、ビルド時に環境変数を仕込むということ自体は妥当と判断する。

環境変数のファイルはローカルでビルドする場合ならソースの外側、かつDockerfileやdocker-compose.yamlの参照領域にあればよく、CI/CDサービスでビルドする場合はサービスのコンソールにセットするような形になるためソースというよりドキュメントに近い。

結局、前者の場合も後者の場合もルートディレクトリに配置して.gitignoreすることとした。一方で環境変数の定義自体はアプリケーションとの関連性が強いため、以下のような配置とした。

```
# テンプレートファイル
./src/app/env/.env.template
# 本体
./src/.env.dev
./src/.env.prd
```

ソースを配布された開発者が利用する場合はsrc内部から外側へコピーすればよい。

```
cp ./src/app/env/.env.template ./src/.env.dev
```
